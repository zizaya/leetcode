//知识点：
/* 
一."01" > "001" 作为字符串来说，每个字符都有一个对应的ASCII或Unicode码值，然后按照这些码值进行比较

二. a == b == 1其实是 (a== b) == 1
    let a = 0
    let b = 0
    console.log(a== b == 1) true
    因为a==b 成立true ，true == 1 成立
    
三.字符串转数字的几个方式：常用+运算符和Number()函数
    1.使用 parseInt() 函数:
    let num = parseInt("123"); // 结果为 123，仅转换整数部分

    2.使用 parseFloat() 函数:
    let num = parseFloat("123.45"); // 结果为 123.45，支持小数点

    3.使用 Number() 函数:
    let num = Number("123"); // 结果为 123
    let numFloat = Number("123.45"); // 结果为 123.45

    4.一元加号运算符 (+):
    let num = +"123"; // 结果为 123
    let numFloat = +"123.45"; // 结果为 123.45

    5.使用 isNaN() 进行安全转换:
    let num = isNaN("123") ? 0 : Number("123"); // 非数字字符串时转为0或其他默认值

    6.利用算术运算:
    通过与1相加或减去0可以隐式转换为数字，但这种方式不够直观，且在某些边缘情况下可能有问题。
    let num = "123" - 0; // 结果为 123

    7.利用 Math 对象的函数:
    虽然不常用，但像 Math.floor()、Math.round() 或 Math.ceil() 可以间接用于特定类型的转换，尤其是当你需要对数字进行四舍五入或取整时。 
    
四.let arr = [1,2,3]
    arr.join()//1,2,3 
    如果想要没有逗号，要用arr.join('')


五.关于空间复杂度
    字符串的空间复杂度大于数字的空间复杂度，占用了空间
    且时间复杂度也高O（n）

    比如 str = str + "newPart"，这条语句执行时，实际上做了以下几步：
    1.读取原字符串 str 的内容。
    2.创建一个新的字符串，内容为原字符串加上 "newPart"。
    3.将新字符串的引用赋值给 str。
        
    
    
    */